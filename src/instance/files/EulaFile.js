// @flow
import TextFile from "../../util/TextFile";
import pkg from "../../../package.json";

class EulaFile extends TextFile<boolean> {
  static header(): string {
    return `# Generated by ${pkg.name} v${
      pkg.version
    } on ${new Date().toLocaleString()}`;
  }

  static parse(rawValue: string): boolean {
    if (!rawValue) return false;
    const fileData = rawValue
      .split(/\r?\n/g)
      .filter(Boolean)
      .map(line => line.trim())
      .filter(line => !line.startsWith("#"))
      .map(line => line.split("="))
      .reduce((acc, [key, ...value]) => {
        acc[key] = value.join("=");
        return acc;
      }, {});

    return fileData.eula && fileData.eula === "true";
  }

  static serialize(value: boolean): string {
    return `${this.header()}\neula=${value ? "true" : "false"}`;
  }

  static validate(value: boolean): void {
    if (typeof value !== "boolean") {
      throw new Error(`EulaFile.write only accepts a boolean`);
    }
  }

  async accept(): Promise<void> {
    return this.write(true);
  }

  async readRaw(): Promise<string> {
    try {
      return await super.readRaw();
    } catch (error) {
      if (error.code === "ENOENT") {
        return "";
      }
      throw error;
    }
  }
}

export default EulaFile;
